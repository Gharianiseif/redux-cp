{"ast":null,"code":"import { ADD_TASK, ALL_TASK, COMPLETE_TASK, DELETE_TASK, DONE_TASK, EDIT_TASK, EDIT_TASK_OK, FILTER_TASK } from './ActionType';\nconst initState = {\n  tasks: [{\n    id: '1',\n    text: 'behi',\n    isDone: false,\n    tabdil: false\n  }, {\n    id: '2',\n    text: 'akeka',\n    isDone: false,\n    tabdil: false\n  }],\n  y: \"ALL\"\n};\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case ADD_TASK:\n      return { ...state,\n        tasks: [...state.tasks, {\n          text: action.payload,\n          id: Math.random(),\n          isDone: false,\n          tabdil: false\n        }]\n      };\n\n    case COMPLETE_TASK:\n      return { ...state,\n        tasks: state.tasks.map(el => el.id === action.payload ? { ...el,\n          isDone: !el.isDone\n        } : el)\n      };\n\n    case DELETE_TASK:\n      return { ...state,\n        tasks: state.tasks.filter(el => el.id !== action.payload)\n      };\n\n    case EDIT_TASK_OK:\n      return { ...state,\n        tasks: state.tasks.map(el => el.id === action.payload.id ? { ...el,\n          tabdil: !el.tabdil,\n          text: action.payload.text\n        } : el)\n      };\n\n    case EDIT_TASK:\n      return { ...state,\n        tasks: state.tasks.map(el => el.id === action.payload ? { ...el,\n          tabdil: !el.tabdil\n        } : el)\n      };\n\n    case FILTER_TASK:\n      return { ...state,\n        y: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/HP/Desktop/reduxcp/src/component/Reducer.js"],"names":["ADD_TASK","ALL_TASK","COMPLETE_TASK","DELETE_TASK","DONE_TASK","EDIT_TASK","EDIT_TASK_OK","FILTER_TASK","initState","tasks","id","text","isDone","tabdil","y","reducer","state","action","type","payload","Math","random","map","el","filter"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,QAAlB,EAA4BC,aAA5B,EAA2CC,WAA3C,EAAwDC,SAAxD,EAAmEC,SAAnE,EAA8EC,YAA9E,EAA4FC,WAA5F,QAA6G,cAA7G;AAEE,MAAMC,SAAS,GAAE;AACfC,EAAAA,KAAK,EAAC,CAAC;AAACC,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,IAAI,EAAC,MAAb;AAAoBC,IAAAA,MAAM,EAAC,KAA3B;AAAkCC,IAAAA,MAAM,EAAC;AAAzC,GAAD,EACN;AAACH,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,IAAI,EAAC,OAAb;AAAqBC,IAAAA,MAAM,EAAC,KAA5B;AAAkCC,IAAAA,MAAM,EAAC;AAAzC,GADM,CADS;AAInBC,EAAAA,CAAC,EAAC;AAJiB,CAAjB;;AAQF,MAAMC,OAAO,GAAE,CAACC,KAAK,GAACR,SAAP,EAAiBS,MAAjB,KAA0B;AACrC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKlB,QAAL;AACI,aAAM,EACN,GAAGgB,KADG;AAENP,QAAAA,KAAK,EAAC,CAAC,GAAGO,KAAK,CAACP,KAAV,EAAgB;AAACE,UAAAA,IAAI,EAACM,MAAM,CAACE,OAAb;AAAqBT,UAAAA,EAAE,EAACU,IAAI,CAACC,MAAL,EAAxB;AAAsCT,UAAAA,MAAM,EAAC,KAA7C;AAAmDC,UAAAA,MAAM,EAAC;AAA1D,SAAhB;AAFA,OAAN;;AAKJ,SAAKX,aAAL;AACI,aAAM,EACV,GAAGc,KADO;AAEVP,QAAAA,KAAK,EAACO,KAAK,CAACP,KAAN,CAAYa,GAAZ,CAAgBC,EAAE,IAAEA,EAAE,CAACb,EAAH,KAAQO,MAAM,CAACE,OAAf,GAAuB,EAAC,GAAGI,EAAJ;AAAOX,UAAAA,MAAM,EAAC,CAACW,EAAE,CAACX;AAAlB,SAAvB,GAAmDW,EAAvE;AAFI,OAAN;;AAMA,SAAKpB,WAAL;AACI,aAAM,EACF,GAAGa,KADD;AAEFP,QAAAA,KAAK,EAACO,KAAK,CAACP,KAAN,CAAYe,MAAZ,CAAmBD,EAAE,IAAEA,EAAE,CAACb,EAAH,KAAQO,MAAM,CAACE,OAAtC;AAFJ,OAAN;;AAIJ,SAAKb,YAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHP,QAAAA,KAAK,EAACO,KAAK,CAACP,KAAN,CAAYa,GAAZ,CAAgBC,EAAE,IAAEA,EAAE,CAACb,EAAH,KAAQO,MAAM,CAACE,OAAP,CAAeT,EAAvB,GAA0B,EAAC,GAAGa,EAAJ;AAAOV,UAAAA,MAAM,EAAC,CAACU,EAAE,CAACV,MAAlB;AAAyBF,UAAAA,IAAI,EAACM,MAAM,CAACE,OAAP,CAAeR;AAA7C,SAA1B,GAA6EY,EAAjG;AAFH,OAAP;;AAIA,SAAKlB,SAAL;AACI,aAAM,EACF,GAAGW,KADD;AAEFP,QAAAA,KAAK,EAACO,KAAK,CAACP,KAAN,CAAYa,GAAZ,CAAgBC,EAAE,IAAEA,EAAE,CAACb,EAAH,KAAQO,MAAM,CAACE,OAAf,GAAuB,EAAC,GAAGI,EAAJ;AAAOV,UAAAA,MAAM,EAAC,CAACU,EAAE,CAACV;AAAlB,SAAvB,GAAiDU,EAArE;AAFJ,OAAN;;AAIJ,SAAKhB,WAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHF,QAAAA,CAAC,EAACG,MAAM,CAACE;AAFN,OAAP;;AAIZ;AACI,aAAOH,KAAP;AAnCR;AAuCH,CAxCD;;AAyCA,eAAeD,OAAf","sourcesContent":["import {ADD_TASK, ALL_TASK, COMPLETE_TASK, DELETE_TASK, DONE_TASK, EDIT_TASK, EDIT_TASK_OK, FILTER_TASK}from './ActionType'\r\n\r\n  const initState ={\r\n    tasks:[{id:'1',text:'behi',isDone:false, tabdil:false},\r\n    {id:'2',text:'akeka',isDone:false,tabdil:false}\r\n],\r\ny:\"ALL\"\r\n\r\n\r\n}\r\nconst reducer =(state=initState,action)=>{\r\n    switch (action.type) {\r\n        case ADD_TASK:\r\n            return{\r\n            ...state,\r\n            tasks:[...state.tasks,{text:action.payload,id:Math.random(),isDone:false,tabdil:false}]\r\n            }\r\n            \r\n        case COMPLETE_TASK:\r\n            return{\r\n        ...state,\r\n        tasks:state.tasks.map(el=>el.id===action.payload?{...el,isDone:!el.isDone} : el)    \r\n            }\r\n            \r\n\r\n            case DELETE_TASK :\r\n                return{\r\n                    ...state,\r\n                    tasks:state.tasks.filter(el=>el.id!==action.payload)\r\n                }\r\n            case EDIT_TASK_OK:\r\n                return {\r\n                    ...state,\r\n                    tasks:state.tasks.map(el=>el.id===action.payload.id?{...el,tabdil:!el.tabdil,text:action.payload.text}:el)\r\n                }\r\n                case EDIT_TASK:\r\n                    return{\r\n                        ...state,\r\n                        tasks:state.tasks.map(el=>el.id===action.payload?{...el,tabdil:!el.tabdil}:el)\r\n                    }\r\n                case FILTER_TASK:\r\n                    return {\r\n                        ...state,\r\n                        y:action.payload\r\n                    }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}